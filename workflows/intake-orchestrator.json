{
  "name": "Website Builder Intake Orchestrator",
  "nodes": [
    {
      "parameters": {
        "path": "intake",
        "options": {}
      },
      "id": "webhook-intake",
      "name": "Intake Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [240, 300],
      "webhookMethods": {
        "POST": true
      }
    },
    {
      "parameters": {
        "functionCode": "// Validate and structure the incoming request\nconst payload = $json;\n\nif (!payload.requestId || !payload.companyName || !payload.email) {\n  throw new Error('Missing required fields: requestId, companyName, or email');\n}\n\n// Structure data for domain sherpa\nconst domainData = {\n  requestId: payload.requestId,\n  companyName: payload.companyName,\n  siteGoal: payload.siteGoal,\n  hasDomain: payload.hasDomain,\n  currentDomain: payload.currentDomain,\n  domainPreferences: payload.domainPreferences || [],\n  autoRegister: payload.autoRegister || false,\n  community: payload.community,\n  fullName: payload.fullName,\n  email: payload.email\n};\n\nreturn { domainData, originalPayload: payload };"
      },
      "id": "validate-input",
      "name": "Validate & Structure Input",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "url": "=http://localhost:5678/webhook/domain-sherpa",
        "options": {},
        "bodyParametersUi": {
          "parameter": []
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.domainData }}"
      },
      "id": "call-domain-sherpa",
      "name": "Call Domain Sherpa",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [680, 220]
    },
    {
      "parameters": {
        "functionCode": "// Combine domain results with original payload for logo brandsmith\nconst domainResult = $json;\nconst originalPayload = $node['Validate & Structure Input'].json.originalPayload;\n\n// Structure data for logo brandsmith\nconst logoData = {\n  requestId: originalPayload.requestId,\n  companyName: originalPayload.companyName,\n  siteGoal: originalPayload.siteGoal,\n  hasLogo: originalPayload.hasLogo,\n  logoPrompt: originalPayload.logoPrompt,\n  copyTone: originalPayload.copyTone,\n  community: originalPayload.community,\n  chosenDomain: domainResult.chosen?.domain,\n  pagesWanted: originalPayload.pagesWanted,\n  features: originalPayload.features\n};\n\nreturn { logoData, domainResult, originalPayload };"
      },
      "id": "prepare-logo-data",
      "name": "Prepare Logo Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [900, 220]
    },
    {
      "parameters": {
        "url": "=http://localhost:5678/webhook/logo-brandsmith",
        "options": {},
        "bodyParametersUi": {
          "parameter": []
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.logoData }}"
      },
      "id": "call-logo-brandsmith",
      "name": "Call Logo Brandsmith",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1120, 220]
    },
    {
      "parameters": {
        "functionCode": "// Combine all results for site builder\nconst logoResult = $json;\nconst domainResult = $node['Prepare Logo Data'].json.domainResult;\nconst originalPayload = $node['Prepare Logo Data'].json.originalPayload;\n\n// Structure data for site builder\nconst siteData = {\n  requestId: originalPayload.requestId,\n  companyName: originalPayload.companyName,\n  fullName: originalPayload.fullName,\n  email: originalPayload.email,\n  siteGoal: originalPayload.siteGoal,\n  pagesWanted: originalPayload.pagesWanted,\n  features: originalPayload.features,\n  copyTone: originalPayload.copyTone,\n  crmProvider: originalPayload.crmProvider,\n  timeline: originalPayload.timeline,\n  specialRequests: originalPayload.specialRequests,\n  chosenDomain: domainResult.chosen?.domain,\n  brandAssets: logoResult\n};\n\nreturn { siteData, logoResult, domainResult, originalPayload };"
      },
      "id": "prepare-site-data",
      "name": "Prepare Site Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [1340, 220]
    },
    {
      "parameters": {
        "url": "=http://localhost:5678/webhook/site-builder",
        "options": {},
        "bodyParametersUi": {
          "parameter": []
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.siteData }}"
      },
      "id": "call-site-builder",
      "name": "Call Site Builder",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1560, 220]
    },
    {
      "parameters": {
        "functionCode": "// Combine all results for vercel deployer\nconst siteResult = $json;\nconst logoResult = $node['Prepare Site Data'].json.logoResult;\nconst domainResult = $node['Prepare Site Data'].json.domainResult;\nconst originalPayload = $node['Prepare Site Data'].json.originalPayload;\n\n// Structure data for vercel deployer\nconst deployData = {\n  requestId: originalPayload.requestId,\n  companyName: originalPayload.companyName,\n  fullName: originalPayload.fullName,\n  email: originalPayload.email,\n  chosenDomain: domainResult.chosen?.domain,\n  projectFiles: siteResult.projectStructure,\n  brandAssets: logoResult,\n  crmProvider: originalPayload.crmProvider,\n  features: originalPayload.features\n};\n\nreturn { deployData, siteResult, logoResult, domainResult, originalPayload };"
      },
      "id": "prepare-deploy-data",
      "name": "Prepare Deploy Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [1780, 220]
    },
    {
      "parameters": {
        "url": "=http://localhost:5678/webhook/vercel-deployer",
        "options": {},
        "bodyParametersUi": {
          "parameter": []
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.deployData }}"
      },
      "id": "call-vercel-deployer",
      "name": "Call Vercel Deployer",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2000, 220]
    },
    {
      "parameters": {
        "functionCode": "// Send final results back to API\nconst deployResult = $json;\nconst siteResult = $node['Prepare Deploy Data'].json.siteResult;\nconst logoResult = $node['Prepare Deploy Data'].json.logoResult;\nconst domainResult = $node['Prepare Deploy Data'].json.domainResult;\nconst originalPayload = $node['Prepare Deploy Data'].json.originalPayload;\n\nconst finalResult = {\n  requestId: originalPayload.requestId,\n  status: 'completed',\n  results: {\n    domain: domainResult,\n    branding: logoResult,\n    website: siteResult,\n    deployment: deployResult\n  },\n  deliverables: {\n    liveWebsite: deployResult.postDeployment?.liveUrl,\n    githubRepo: deployResult.deployment?.githubRepo?.url,\n    adminAccess: deployResult.postDeployment?.adminAccess\n  },\n  completedAt: new Date().toISOString()\n};\n\nreturn finalResult;"
      },
      "id": "compile-results",
      "name": "Compile Final Results",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [2220, 220]
    },
    {
      "parameters": {
        "responseBody": "={{ $json }}",
        "responseCode": 200
      },
      "id": "respond-to-api",
      "name": "Respond to API",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2440, 220]
    }
  ],
  "connections": {
    "Intake Webhook": {
      "main": [
        [
          {
            "node": "Validate & Structure Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate & Structure Input": {
      "main": [
        [
          {
            "node": "Call Domain Sherpa",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Domain Sherpa": {
      "main": [
        [
          {
            "node": "Prepare Logo Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Logo Data": {
      "main": [
        [
          {
            "node": "Call Logo Brandsmith",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Logo Brandsmith": {
      "main": [
        [
          {
            "node": "Prepare Site Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Site Data": {
      "main": [
        [
          {
            "node": "Call Site Builder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Site Builder": {
      "main": [
        [
          {
            "node": "Prepare Deploy Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Deploy Data": {
      "main": [
        [
          {
            "node": "Call Vercel Deployer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Vercel Deployer": {
      "main": [
        [
          {
            "node": "Compile Final Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compile Final Results": {
      "main": [
        [
          {
            "node": "Respond to API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "local"
  },
  "id": "intake-orchestrator",
  "tags": []
}